<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.javaclassS9.dao.MemberDAO">
	
	<select id="getMemberIdCheck" resultType="com.spring.javaclassS9.vo.MemberVO">
		select * from memberS where mid = #{mid};
	</select>
	<select id="getMemberNickCheck" resultType="com.spring.javaclassS9.vo.MemberVO">
		select * from memberS where nickName = #{nickName};
	</select>
	<select id="getMemberNameCheck" resultType="com.spring.javaclassS9.vo.MemberVO">
		select * from memberS where name = #{name};
	</select>
	<select id="totRecCnt" resultType="int">
		select count(*) from memberS;
	</select>
	<select id="totRecCntSearch" resultType="int">
		select count(*) from memberS where ${search} like concat('%',#{searchString},'%');
	</select>
	<select id="getAllReceiveMessageList" resultType="com.spring.javaclassS9.vo.MessageVO">
		select * from messageS where receiveMid = #{mid} and receiveSw != 'd' order by sendDate desc;
	</select>
	<select id="getAllSendMessageList" resultType="com.spring.javaclassS9.vo.MessageVO">
		select * from messageS where sendMid = #{mid} and sendSw != 'd' order by sendDate desc;
	</select>
	<select id="consultingTotRecCnt" resultType="int">
		select count(*) from consultingS where name=#{name} and email=#{email};
	</select>
	<select id="getConsultingList" resultType="com.spring.javaclassS9.vo.ConsultingVO">
		select *, datediff(writeDate,now()) as date_diff, datediff(completeDate,now()) as date_diffC 
			from consultingS where name=#{name} and email=#{email} 
			order by idx desc limit #{startIndexNo},#{pageSize};
	</select>
	<select id="getConsultingContent" resultType="com.spring.javaclassS9.vo.ConsultingVO">
		select *, datediff(writeDate,now()) as date_diff, datediff(completeDate,now()) as date_diffC 
			from consultingS where idx = #{idx};
	</select>
	<select id="getReportMember" resultType="com.spring.javaclassS9.vo.ReportMemberVO">
		select * from reportMember where hostIp=#{hostIp} and rpMid=#{rpMid};
	</select>
	<select id="reportMemberTotRecCnt" resultType="int">
		select count(*) from reportMember;
	</select>
	<select id="getReportMemberList" resultType="com.spring.javaclassS9.vo.ReportMemberVO">
		select *, count(*) as rpNum from reportMember group by hostIp 
			order by rpDate, idx desc limit #{startIndexNo},#{pageSize};
	</select>
	<select id="getNewMessageCount" resultType="int">
		select count(*) from messageS where receiveMid=#{mid} and receiveSw='n';
	</select>
	<select id="getNewEstimateCount" resultType="int">
		select count(*) from productSaleS where memberMid=#{mid} and statement='CHECK';
	</select>
	
	
	<insert id="setMemberJoinOk">
		insert into memberS values (default, #{vo.name}, #{vo.mid}, #{vo.pwd}, #{vo.nickName},
			#{vo.birthday}, #{vo.email}, #{vo.emailNews}, #{vo.tel}, #{vo.address}, #{vo.m_group},
			#{vo.co_name}, #{vo.co_category}, #{vo.co_address}, #{vo.co_tel}, #{vo.purpose},
			default, default, default, default, default);
	</insert>
	<insert id="setKakaoMemberInput">
		insert into memberS (name, mid, pwd, nickName, email, tel) values (#{nickName}, #{mid}, #{pwd}, 
			#{nickName}, #{email}, '010- - ');
	</insert>
	<insert id="setMessageInputOk">
		insert into messageS values(default,#{vo.sendMid}, #{vo.receiveMid}, #{vo.content}, 
			#{vo.sendSw}, default, #{vo.receiveSw}, default);
	</insert>
	<insert id="setReportMemberInput">
		insert into reportMember values(default, #{hostIp}, #{rpMid}, default, default, default);
	</insert>
	
	
	<update id="setMemberInfoUpdate">
		update memberS set lastDate=now();
	</update>
	<update id="setMemberPwdUpdate">
		update memberS set pwd = #{pwd} where mid = #{mid};
	</update>
	<update id="setMemberUpdateOk">
		update memberS set name=#{vo.name}, nickName=#{vo.nickName}, birthday=#{vo.birthday}, email=#{vo.email},
			emailNews=#{vo.emailNews}, tel=#{vo.tel}, address=#{vo.address}, m_group=#{vo.m_group},
			co_name=#{vo.co_name}, co_category=#{vo.co_category}, co_address=#{vo.co_address}, co_tel=#{vo.co_tel},
			purpose=#{vo.purpose} where mid = #{vo.mid};
	</update>
	<update id="setMemberDeleteOk">
		update memberS set userDel='OK', level=99 where mid = #{mid};
	</update>
	
	<update id="setMessageCheck">
		update messageS set receiveSw = 'r' where idx=#{idx};
	</update>
	<update id="setMessageDelete">
		update messageS set 
			<if test="sw == 'receiveSw'"> receiveSw = 'd' </if>
			<if test="sw == 'sendSw'"> sendSw = 'd' </if> where idx=#{idx};
	</update>
	
	<update id="setReportMemberUpdate">
		update reportMember set blockNum = blockNum + 1 and block='OK' where hostIp=#{hostIp};
	</update>
	<update id="setReportMemberUpdateBlock">
		update reportMember set block='NO' where hostIp=#{hostIp};
	</update>
	
	
	<delete id="setMessageDeleteDB">
		delete from messageS where idx = #{idx};
	</delete>
	
</mapper>