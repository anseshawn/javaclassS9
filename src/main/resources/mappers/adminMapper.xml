<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.javaclassS9.dao.AdminDAO">

	<select id="getAllMemberList" resultType="com.spring.javaclassS9.vo.MemberVO">
		select *, timestampdiff(day, lastDate, now()) as deleteDiff from memberS 
			where <![CDATA[level < 999]]> order by startDate desc 
		<if test="startIndexNo != -1"> limit #{startIndexNo},#{pageSize}</if>;
	</select>
	<select id="getMemberLevelList" resultType="com.spring.javaclassS9.vo.MemberVO">
		select *, timestampdiff(day, lastDate, now()) as deleteDiff from memberS
			where m_group=#{m_group} order by idx desc limit #{startIndexNo},#{pageSize};
	</select>
	<select id="getMemberSearchList" resultType="com.spring.javaclassS9.vo.MemberVO">
		select *, timestampdiff(day, lastDate, now()) as deleteDiff from memberS
			where ${part} like concat('%',#{searchString},'%') order by idx desc
			<if test="startIndexNo != -1"> limit #{startIndexNo},#{pageSize}</if>;
	</select>
	<select id="getJoinMemberCount" resultType="int">
		select count(*) from memberS where <![CDATA[datediff(startDate,now()) > -7]]>;
	</select>
	<select id="getLevelChangeMemberCount" resultType="int">
		select count(*) from memberS where m_group='재직자' and level=3;
	</select>
	<select id="getProductEstimateCount" resultType="int">
		select count(*) from productSaleS where statement='QUOTE';
	</select>
	<select id="getNewConsultingCount" resultType="int">
		select count(*) from consultingS where completeDate is null;
	</select>
	<select id="getMemberDeleteReason" resultType="com.spring.javaclassS9.vo.DeleteMemberVO">
		select deleteReason,reasonDetail, count(*) as reasonCnt from deleteMember
			where deleteReason between 1 and 6 group by deleteReason;
	</select>
	<select id="getMemberJoinDate" resultType="com.spring.javaclassS9.vo.MemberVO">
		select date_format(startDate,'%Y-%m-%d') as joinDate, count(*) as joinCnt from memberS 
			group by date_format(startDate,'%Y-%m-%d');
	</select>
	<select id="reportBoardTotRecCnt" resultType="int">
		select count(*) from reportS;
	</select>
	<!-- 
	<select id="reportBoardTotRecCntSearch" resultType="int">
		select count(*) from reportS where ${search} like concat('%',#{searchString},'%');
	</select>
	-->
	<select id="getReportBoardList" resultType="com.spring.javaclassS9.vo.ReportVO">
		select r.*, datediff(r.rpDate, now()) as date_diff, 
			b.idx as fbIdx, b.title as fbTitle, b.content as fbContent, b.mid as fbMid, 
			q.idx as qtIdx, q.title as qtTitle, q.content as qtContent, q.mid as qtMid, 
			c.idx as rcIdx, c.title as rcTitle, c.content as rcContent, c.mid as rcMid 
			from reportS r 
			left join freeBoardS b on b.idx = r.boardIdx and r.board='freeBoard' 
			left join questionBoardS q on q.idx = r.boardIdx and r.board='questionBoard' 
			left join recruitBoardS c on c.idx = r.boardIdx and r.board='recruitBoard' 
			order by r.rpDate desc limit #{startIndexNo},#{pageSize};
	</select>
	<select id="getReportBoardContent" resultType="com.spring.javaclassS9.vo.ReportVO">
		select r.*
			<if test="board == 'freeBoard'">, b.idx as fbIdx, b.title as fbTitle, b.content as fbContent </if> 
			<if test="board == 'questionBoard'">, q.idx as qtIdx, q.title as qtTitle, q.content as qtContent </if> 
			<if test="board == 'recruitBoard'">, c.idx as rcIdx, c.title as rcTitle, c.content as rcContent </if> 
			from reportS r 
			<if test="board == 'freeBoard'">left join freeBoardS b on b.idx = r.boardIdx and r.board='freeBoard' </if>
			<if test="board == 'questionBoard'">left join questionBoardS q on q.idx = r.boardIdx and r.board='questionBoard' </if>
			<if test="board == 'recruitBoard'">left join recruitBoardS c on c.idx = r.boardIdx and r.board='recruitBoard' </if>
			where r.idx = #{idx};
	</select>
	<select id="adminAsRequestTotRecCnt" resultType="int">
		select count(*) from asRequest;
	</select>
	<select id="adminAsRequestTotRecCntSearch" resultType="int">
		select count(*) from asRequest r left join engineerS e on r.engineerIdx = e.idx 
			where ${search} like concat('%',#{searchString},'%');
	</select>
	<select id="adminAsRequestDateTotRecCnt" resultType="int">
		select count(*) from asRequest where requestDate between #{start} and #{end} 
			or endDate between #{start} and #{end};
	</select>
	<select id="consultingTotRecCnt" resultType="int">
		select count(*) from consultingS;
	</select>
	<select id="consultingTotRecCntSearch" resultType="int">
		select count(*) from consultingS where ${search} like concat('%',#{searchString},'%');
	</select>
	<select id="getConsultingList" resultType="com.spring.javaclassS9.vo.ConsultingVO">
		SELECT *, datediff(writeDate, now()) AS date_diff 
			FROM consultingS 
			<if test="search != ''"> WHERE ${search} LIKE CONCAT('%',#{searchString},'%') </if> 
			ORDER BY idx desc limit #{startIndexNo},#{pageSize};
	</select>
	<select id="getConsultingContent" resultType="com.spring.javaclassS9.vo.ConsultingVO">
		select * from consultingS where idx = #{idx};
	</select>
	<select id="getPopupNoticeContent" resultType="com.spring.javaclassS9.vo.NoticeVO">
		select * from noticeS where popup = 'OK';
	</select>
	<select id="getImportantNoticeList" resultType="com.spring.javaclassS9.vo.NoticeVO">
		select *, datediff(writeDate, now()) AS date_diff from noticeS where important = 'OK';
	</select>
	<select id="noticeTotRecCnt" resultType="int">
		select count(*) from noticeS where important = 'NO';
	</select>
	<select id="noticeTotRecCntSearch" resultType="int">
		select count(*) from noticeS where important = 'NO' and ${search} like concat('%',#{searchString},'%');
	</select>
	<select id="getNoticeListAll" resultType="com.spring.javaclassS9.vo.NoticeVO">
		SELECT *, datediff(writeDate, now()) AS date_diff 
			FROM noticeS WHERE important='NO' 
			<if test="search != ''"> AND ${search} LIKE CONCAT('%',#{searchString},'%') </if> 
			ORDER BY idx desc limit #{startIndexNo},#{pageSize};
	</select>
	<select id="getNoticeContent" resultType="com.spring.javaclassS9.vo.NoticeVO">
		select *, datediff(writeDate,now()) as date_diff from noticeS where idx=#{idx};
	</select>
	<select id="getNewPaymentCount" resultType="int">
		select 
			(select count(*) from asRequest r, asCharge c where c.asIdx=r.idx and c.statement='COMPLETE' and r.progress='PAYMENT')
			+
			(select count(*) from ProductEstimateS where statement='PAYMENT' and payDate is not null) as newPaymentCount;
	</select>
	<select id="getNewMessageCount" resultType="int">
		select count(*) from messageS where receiveMid='admin' and receiveSw='n';
	</select>
	<select id="faqTotRecCnt" resultType="int">
		select count(*) from faqS;
	</select>
	<select id="faqTotRecCntPart" resultType="int">
		select count(*) from faqS where part=#{part};
	</select>
	<select id="faqTotRecCntSearch" resultType="int">
		select count(*) from faqS where title like concat('%',#{searchString},'%');
	</select>
	<select id="getFaqList" resultType="com.spring.javaclassS9.vo.FaqVO">
		select * from faqS 
			<if test="part != '' "> where part=#{part} </if> 
			<if test="searchString != '' "> where title like concat('%',#{searchString},'%') </if>			
			order by idx desc limit #{startIndexNo},#{pageSize};
	</select>
	<select id="getFaqContent" resultType="com.spring.javaclassS9.vo.FaqVO">
		select * from faqS where idx=#{idx};
	</select>
	<select id="getFaqParts" resultType="String">
		select part from faqS group by part;
	</select>
	<select id="getBlockIp" resultType="com.spring.javaclassS9.vo.BlockIpVO">
		select * from blockIp where hostIp=#{hostIp} limit 1;
	</select>
	<select id="getBlockIpList" resultType="com.spring.javaclassS9.vo.BlockIpVO">
		select hostIp, date_format(date_add(blockDate, interval 1 day), '%Y-%m-%d') as blockEndDate from blockIp;
	</select>
	<select id="getNewChatCount" resultType="int">
		select count(chat) as chatCount from adminAlarm;
	</select>
	
	
	<insert id="setMemberDeleteReason">
		insert into deleteMember values(default, #{vo.deleteReason}, #{vo.reasonDetail}, 
		<if test="vo.deleteReason!=6">""</if>
		<if test="vo.deleteReason==6">#{vo.etc}</if>
		);
	</insert>
	<insert id="setConsultingInput">
		insert into consultingS values(default, #{vo.part}, #{vo.name}, #{vo.email}, #{vo.phone}, 
			#{vo.title}, #{vo.content}, default, null, null);
	</insert>
	<insert id="setNoticeInputOk">
		insert into noticeS values(default, #{vo.part}, #{vo.title}, #{vo.content}, #{vo.popup}, 
			default, #{vo.endDate}, #{vo.important});
	</insert>
	<insert id="faqInputOk">
		insert into faqS values(default, #{vo.part}, #{vo.title}, #{vo.content});
	</insert>
	<insert id="setBlockIpInput">
		insert into blockIp values(#{hostIp}, default);
	</insert>
	<insert id="setNewChatCount">
		insert into adminAlarm (chat) values(1);
	</insert>
	
	
	<update id="setMemberDeleteAll">
		update memberS set mid=#{vo.mid}, pwd=#{vo.pwd}, nickName=#{vo.nickName}, birthday=#{vo.birthday}, 
			email=#{vo.email}, tel=#{vo.tel}, address=#{vo.address}, co_name=null, co_category=null, co_address=null, 
			co_tel=null, level=999 where idx=#{vo.idx};
	</update>
	<update id="setMemberLevelUpdateOk">
		update memberS set level=2 where mid = #{mid};
	</update>
	<update id="setProductSaleChange">
		update productSaleS set statement=#{statement} where idx = #{idx};
	</update>
	<update id="setConsultingAnswer">
		update consultingS set completeDate = now(), answer=#{answer} where idx=#{idx};
	</update>
	<update id="setPopupNoticeDelete">
		update noticeS set popup='NO' where popup='OK';
	</update>
	<update id="setNoticeEdit">
		update noticeS set part=#{vo.part}, title=#{vo.title}, content=#{vo.content}, popup=#{vo.popup}, 
			endDate=#{vo.endDate}, important=#{vo.important} where idx=#{vo.idx};
	</update>
	<update id="setEngineerDelete">
		update engineerS set name=#{vo.name}, mid=#{vo.mid}, pwd=#{vo.pwd}, level=99, tel=#{vo.tel}, 
			email=#{vo.email}, photo=#{vo.photo} where idx = #{vo.idx};
	</update>
	<update id="faqEditOk">
		update faqS set part=#{vo.part}, title=#{vo.title}, content=#{vo.content} where idx=#{vo.idx};
	</update>
	<update id="setAddChatCount">
		update adminAlarm set chat = chat+1;
	</update>
	<update id="setReportMemberChange">
		update reportMember set block='NO' where hostIp=#{hostIp};
	</update>
	<!-- 
	<update id="setNewChatCountDelete">
		update adminAlarm set chat = 0;
	</update>
	-->
	
	
	<!-- 
	<delete id="setMemberDeleteAll">
		delete from memberS where mid = #{mid};
	</delete>
	-->
	<delete id="setProductDeleteOk">
		delete from productS where idx = #{idx};
	</delete>
	<delete id="setReportFreeBoardDelete">
		delete from freeBoardS where idx = (select boardIdx from reportS where idx = #{idx});
	</delete>
	<delete id="setReportQuestionBoardDelete">
		delete from questionBoardS where idx = (select boardIdx from reportS where idx = #{idx});
	</delete>
	<delete id="setReportRecruitBoardDelete">
		delete from recruitBoardS where idx = (select boardIdx from reportS where idx = #{idx});
	</delete>
	<delete id="setReportContentDelete">
		delete from reportS where idx = #{idx};
	</delete>
	<delete id="setReportSameContentDelete">
		delete r1 from reportS r1 join (select boardIdx from reportS where idx = #{idx}) r2 on r1.boardIdx=r2.boardIdx;
	</delete>
	<delete id="setNoticeDelete">
		delete from noticeS where idx = #{idx};
	</delete>
	<delete id="faqDeleteOk">
		delete from faqS where idx=#{idx};
	</delete>
	<delete id="setBlockIpDelete">
		delete from blockIp where hostIp=#{hostIp};
	</delete>
	<delete id="setAsDeleteOk">
		delete from asRequest where idx=#{idx};
	</delete>
	<delete id="setNewChatCountDelete">
		delete from adminAlarm;
	</delete>
	<delete id="setDeleteReportMember">
		delete from reportMember where hostIp=#{hostIp};
	</delete>
	<delete id="setMemberDeleteDB">
		delete from memberS where mid = #{mid};
	</delete>
	
	
</mapper>