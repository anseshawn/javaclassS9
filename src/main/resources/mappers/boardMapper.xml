<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.javaclassS9.dao.BoardDAO">

	<select id="freeTotRecCnt" resultType="int">
		SELECT count(*) FROM freeBoardS;
	</select>
	<select id="freeTotRecCntSearch" resultType="int">
		SELECT count(*) FROM freeBoardS WHERE ${search} LIKE CONCAT('%',#{searchString},'%');
	</select>
	<select id="questionTotRecCnt" resultType="int">
		SELECT count(*) FROM questionBoardS;
	</select>
	<select id="questionTotRecCntSearch" resultType="int">
		SELECT count(*) FROM questionBoardS WHERE ${search} LIKE CONCAT('%',#{searchString},'%');
	</select>
	<select id="recruitTotRecCnt" resultType="int">
		SELECT count(*) FROM recruitBoardS;
	</select>
	<select id="recruitTotRecCntSearch" resultType="int">
		SELECT count(*) FROM recruitBoardS WHERE ${search} LIKE CONCAT('%',#{searchString},'%');
	</select>
	<select id="getFreeBoardList" resultType="com.spring.javaclassS9.vo.FreeBoardVO">
		SELECT *, datediff(writeDate, now()) AS date_diff, timestampdiff(hour, writeDate, now()) AS hour_diff,
			(SELECT count(*) FROM replyS WHERE board='freeBoard' and boardIdx = b.idx) as replyCnt 
			FROM freeBoardS b WHERE <![CDATA[b.report < 5]]>
				<if test="search != ''"> AND ${search} LIKE CONCAT('%',#{searchString},'%') </if> 
				ORDER BY idx desc limit #{startIndexNo},#{pageSize};
	</select>
	<select id="getFreeBoardBestList" resultType="com.spring.javaclassS9.vo.FreeBoardVO">
		SELECT *, datediff(writeDate, now()) AS date_diff, timestampdiff(hour, writeDate, now()) 
			FROM freeBoardS WHERE <![CDATA[report < 5]]> ORDER BY good desc limit 5;
	</select>
	<select id="getFreeBoardContent" resultType="com.spring.javaclassS9.vo.FreeBoardVO">
		SELECT *,(SELECT count(*) FROM replyS WHERE board='freeBoard' and boardIdx = b.idx) as replyCnt 
			FROM freeBoardS b WHERE idx = #{idx};
	</select>
	<select id="getBoardParentReplyCheck" resultType="com.spring.javaclassS9.vo.ReplyVO">
		SELECT * FROM replyS WHERE board=#{board} AND boardIdx=#{boardIdx} ORDER BY idx DESC LIMIT 1;
	</select>
	<select id="getBoardReply" resultType="com.spring.javaclassS9.vo.ReplyVO">
		select *, datediff(replyDate, now()) as date_diff from replyS 
			where board=#{board} and boardIdx=#{boardIdx} order by re_order;
	</select>
	<select id="getBoardOtherReplyCheck" resultType="com.spring.javaclassS9.vo.ReplyVO">
		SELECT * FROM replyS WHERE board=#{board} AND boardIdx=#{boardIdx} AND re_step=1 AND parentId=#{parentId} 
			ORDER BY idx DESC LIMIT 1;
	</select>
	<select id="getBoardReplyOne" resultType="com.spring.javaclassS9.vo.ReplyVO">
		SELECT * FROM replyS WHERE board=#{board} AND boardIdx=#{boardIdx} AND idx=#{idx};
	</select>
	<select id="getBoardLikeList" resultType="com.spring.javaclassS9.vo.BoardLikeVO">
		SELECT * FROM boardLikeS WHERE board=#{board} AND memberMid=#{mid};
	</select>
	<select id="getBoardReportRecord" resultType="com.spring.javaclassS9.vo.ReportVO">
		SELECT * FROM reportS WHERE board=#{vo.board} AND boardIdx=#{vo.boardIdx} AND rpMid=#{vo.rpMid};
	</select>
	<select id="getBoardLikeListAll" resultType="com.spring.javaclassS9.vo.BoardLikeVO">
		SELECT * FROM boardLikeS WHERE memberMid=#{mid};
	</select>
	<select id="getQuestionBoardList" resultType="com.spring.javaclassS9.vo.QuestionBoardVO">
		SELECT *, datediff(writeDate, now()) AS date_diff, timestampdiff(hour, writeDate, now()) AS hour_diff,
			(SELECT count(*) FROM replyS WHERE board='questionBoard' and boardIdx = b.idx) as replyCnt FROM questionBoardS b
			WHERE <![CDATA[b.report < 5]]>  
			<if test="search != ''"> AND ${search} LIKE CONCAT('%',#{searchString},'%') </if> 
			ORDER BY idx desc	limit #{startIndexNo},#{pageSize};
	</select>
	<select id="getRecentReplyQuestionBoard" resultType="com.spring.javaclassS9.vo.QuestionBoardVO">
		SELECT b.*, datediff(writeDate, now()) AS date_diff, timestampdiff(hour, writeDate, now()) AS hour_diff,
			(SELECT count(*) FROM replyS WHERE board='questionBoard' and boardIdx = b.idx) as replyCnt, 
			r.replyDate FROM questionBoardS b, replyS r WHERE b.idx=r.boardIdx AND <![CDATA[b.report < 5]]>
			GROUP BY b.idx ORDER BY r.replyDate DESC limit 5;
	</select>
	<select id="getQuestionBoardContent" resultType="com.spring.javaclassS9.vo.QuestionBoardVO">
		SELECT *,(SELECT count(*) FROM replyS WHERE board='questionBoard' and boardIdx = b.idx) as replyCnt 
			FROM questionBoardS b WHERE idx = #{idx};
	</select>
	<select id="getRecruitPartCount" resultType="com.spring.javaclassS9.vo.RecruitBoardVO">
		select part, count(*) as partCnt from recruitBoardS group by part order by writeDate desc;
	</select>
	<select id="getRecruitBoardList" resultType="com.spring.javaclassS9.vo.RecruitBoardVO">
		SELECT *, datediff(writeDate, now()) AS date_diff, timestampdiff(hour, writeDate, now()) AS hour_diff,
			(SELECT count(*) FROM replyS WHERE board='recruitBoard' and boardIdx = b.idx) as replyCnt 
			FROM recruitBoardS b WHERE <![CDATA[b.report < 5]]>
			<if test="search != ''"> AND ${search} LIKE CONCAT('%',#{searchString},'%') </if> 
			ORDER BY idx desc limit #{startIndexNo},#{pageSize};
	</select>
	<select id="getRecruitBoardContent" resultType="com.spring.javaclassS9.vo.RecruitBoardVO">
		SELECT *,(SELECT count(*) FROM replyS WHERE board='recruitBoard' and boardIdx = b.idx) as replyCnt 
			FROM recruitBoardS b WHERE idx = #{idx};
	</select>
	<select id="getBoardReplyMidCheck" resultType="com.spring.javaclassS9.vo.ReplyVO">
		select * from replyS where mid = #{mid} 
			<if test="search != ''"> and ${search} like concat('%',#{searchString},'%') </if> 
			order by idx desc limit #{startIndexNo}, #{pageSize};
	</select>
	<select id="getFreeBoardMidCheck" resultType="com.spring.javaclassS9.vo.FreeBoardVO">
		select * from freeBoardS where mid = #{mid} 
			<if test="search != ''"> and ${search} like concat('%',#{searchString},'%') </if> 
			order by idx desc limit #{startIndexNo},#{pageSize};
	</select>
	<select id="getQuestionBoardMidCheck" resultType="com.spring.javaclassS9.vo.QuestionBoardVO">
		select * from questionBoardS where mid = #{mid} 
			<if test="search != ''"> and ${search} like concat('%',#{searchString},'%') </if> 
			order by idx desc limit #{startIndexNo},#{pageSize};
	</select>
	<select id="getRecruitBoardMidCheck" resultType="com.spring.javaclassS9.vo.RecruitBoardVO">
		select * from recruitBoardS where mid = #{mid} 
			<if test="search != ''"> and ${search} like concat('%',#{searchString},'%') </if> 
			order by idx desc limit #{startIndexNo},#{pageSize};
	</select>
	<select id="writeBoardTotRecCnt" resultType="int">
		select 
			(select count(*) from freeBoardS where mid = #{mid}) + 
			(select count(*) from questionBoardS where mid = #{mid}) + 
			(select count(*) from recruitBoardS where mid = #{mid})
			as totRecCnt;
	</select>
	<select id="writeReplyTotRecCnt" resultType="int">
		select count(*) from replyS where mid = #{mid};
	</select>
	<select id="writeBoardTotRecCntSearch" resultType="int">
		select 
			(select count(*) from freeBoardS where mid = #{mid} and ${search} like concat('%',#{searchString},'%')) + 
			(select count(*) from questionBoardS where mid = #{mid} and ${search} like concat('%',#{searchString},'%')) + 
			(select count(*) from recruitBoardS where mid = #{mid} and ${search} like concat('%',#{searchString},'%'))
			as totRecCnt;
	</select>
	<select id="writeReplyTotRecCntSearch" resultType="int">
		select count(*) from replyS where mid = #{mid} and ${search} like concat('%',#{searchString},'%');
	</select>
	<select id="pdsTotRecCnt" resultType="int">
		select count(*) from pdsS;
	</select>
	<select id="pdsTotRecCntSearch" resultType="int">
		select count(*) from pdsS where ${search} like concat('%',#{searchString},'%');
	</select>
	<select id="getPdsListAll" resultType="com.spring.javaclassS9.vo.PdsVO">
		SELECT *, datediff(writeDate, now()) AS date_diff FROM pdsS 
			<if test="search != ''"> WHERE ${search} LIKE CONCAT('%',#{searchString},'%') </if> 
			ORDER BY idx desc limit #{startIndexNo},#{pageSize};
	</select>
	<select id="getPdsContent" resultType="com.spring.javaclassS9.vo.PdsVO">
		select *, datediff(writeDate, now()) as date_diff from pdsS where idx = #{idx};
	</select>
	
	
	<insert id="setFreeBoardInput">
		INSERT INTO freeBoardS VALUES (default, #{vo.mid}, #{vo.nickName}, #{vo.title}, #{vo.content}, #{vo.hostIp}, 
			default, default, default, default);
	</insert>
	<insert id="setQuestionBoardInput">
		INSERT INTO questionBoardS VALUES (default, #{vo.mid}, #{vo.nickName}, #{vo.title}, #{vo.content}, #{vo.hostIp}, 
			default, default, #{vo.part}, default, default);
	</insert>
	<insert id="setBoardReplyInput">
		insert into replyS values (default, #{vo.board}, #{vo.boardIdx}, #{vo.re_step}, #{vo.re_order}, 
			#{vo.parentId},  
			#{vo.mid}, #{vo.nickName}, default, #{vo.hostIp}, #{vo.content}, default);
	</insert>
	<insert id="setBoardLikeAdd">
		insert into boardLikeS values(default, #{vo.memberMid}, #{vo.board}, #{vo.boardIdx}, default);
	</insert>
	<insert id="setBoardReportInput">
		insert into reportS values(default, #{vo.board}, #{vo.boardIdx}, #{vo.rpMid}, #{vo.rpContent}, default);
	</insert>
	<insert id="setRecruitBoardInput">
		insert into recruitBoardS values(default, #{vo.mid}, #{vo.nickName}, #{vo.title}, #{vo.content}, #{vo.hostIp}, 
			default, default, #{vo.part}, #{vo.location}, default, #{vo.endDate}, #{vo.etcContent}, #{vo.rcfName}, 
			#{vo.rcfSName}, default, default);
	</insert>
	<insert id="setPdsInputOk">
		insert into pdsS values(default, #{vo.mid}, #{vo.title}, #{vo.content}, default, #{vo.fileName}, #{vo.fileSName}, 
			#{vo.fileSize}, default);
	</insert>
	
	
	<update id="setFreeBoardEdit">
		UPDATE freeBoardS SET mid=#{vo.mid}, nickName=#{vo.nickName}, title=#{vo.title}, content=#{vo.content},
			hostIp=#{vo.hostIp} WHERE idx=#{vo.idx};
	</update>
	<update id="setReplyOrderUpdate">
		update replyS set re_order = re_order+1 where board=#{board} and boardIdx=#{boardIdx} and re_order > #{re_order};
	</update>
	<update id="setBoardReplyUpdate">
		update replyS set mid=#{vo.mid}, nickName=#{vo.nickName}, hostIp=#{vo.hostIp}, content=#{vo.content} where idx=#{vo.idx};
	</update>
	<update id="setFreeBoardGoodUpdate">
		update freeBoardS set good = good+1 where idx=#{idx};
	</update>
	<update id="setFreeBoardGoodDown">
		update freeBoardS set good = good-1 where idx=#{idx};
	</update>
	<update id="setQuestionBoardGoodUpdate">
		update questionBoardS set good = good+1 where idx=#{idx};
	</update>
	<update id="setQuestionBoardGoodDown">
		update questionBoardS set good = good-1 where idx=#{idx};
	</update>
	<update id="setRecruitBoardGoodUpdate">
		update recruitBoardS set good = good+1 where idx=#{idx};
	</update>
	<update id="setRecruitBoardGoodDown">
		update recruitBoardS set good = good-1 where idx=#{idx};
	</update>
	<update id="setFreeBoardReportUpdate">
		update freeBoardS set report = report+1 where idx=#{idx};
	</update>
	<update id="setQuestionBoardReportUpdate">
		update questionBoardS set report = report+1 where idx=#{idx};
	</update>
	<update id="setRecruitBoardReportUpdate">
		update recruitBoardS set report = report+1 where idx=#{idx};
	</update>
	<update id="setFreeBoardReadNumPlus">
		update freeBoardS set readNum = readNum+1 where idx=#{idx};
	</update>
	<update id="setQuestionBoardReadNumPlus">
		update questionBoardS set readNum = readNum+1 where idx=#{idx};
	</update>
	<update id="setRecruitBoardReadNumPlus">
		update recruitBoardS set readNum = readNum+1 where idx=#{idx};
	</update>
	<update id="setRecruitBoardEdit">
		update recruitBoardS set mid=#{vo.mid}, nickName=#{vo.nickName}, title=#{vo.title}, content=#{vo.content}, 
			hostIp=#{vo.hostIp}, part=#{vo.part}, location=#{vo.location}, endDate=#{vo.endDate}, etcContent=#{vo.etcContent}, 
			rcfName=#{vo.rcfName}, rcfSName=#{vo.rcfSName} where idx = #{vo.idx};
	</update>
	<update id="setQuestionBoardEdit">
		update questionBoardS set mid=#{vo.mid}, nickName=#{vo.nickName}, title=#{vo.title}, content=#{vo.content}, 
			hostIp=#{vo.hostIp}, part=#{vo.part} where idx = #{vo.idx};
	</update>
	<update id="setPdsEditOk">
		update pdsS set mid=#{vo.mid}, title=#{vo.title}, content=#{vo.content}, fileName=#{vo.fileName}, fileSName=#{vo.fileSName}, 
			fileSize=#{vo.fileSize} where idx = #{vo.idx};
	</update>

	
	<delete id="setBoardReplyDelete">
		delete from replyS where board=#{board} and boardIdx=#{boardIdx} <if test="idx!=0"> and idx=#{idx}</if>;
	</delete>
	<delete id="setFreeBoardDelete">
		delete from freeBoardS where idx=#{idx};
	</delete>
	<delete id="setRecruitBoardDelete">
		delete from recruitBoardS where idx=#{idx};
	</delete>
	<delete id="setQuestionBoardDelete">
		delete from questionBoardS where idx=#{idx};
	</delete>
	<delete id="setBoardLikeDelete">
		delete from boardLikeS where board=#{vo.board} and boardIdx=#{vo.boardIdx} and memberMid=#{vo.memberMid};
	</delete>
	<delete id="setPdsDeleteOk">
		delete from pdsS where idx=#{idx};
	</delete>

</mapper>